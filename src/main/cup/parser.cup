package parser;

import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import syntax.*;
import scala.Tuple2;
import scala.Tuple3;
import scala.collection.immutable.Map;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;

parser code {:
    public Parser(Lexer lexer, ComplexSymbolFactory csf) { super(lexer, csf); }

    public static Tuple3<Proc, Map<String, Name>, Name>
            parseString(String input) throws Exception {

        return parseStream(
            new ByteArrayInputStream(input.getBytes(StandardCharsets.UTF_8)));
    }

    public static Tuple3<Proc, Map<String, Name>, Name>
            parseStream(InputStream input) throws Exception {

        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        Lexer lexer = new Lexer(new InputStreamReader(input), csf);
        Proc parsedTerm = (Proc)
                (new Parser(new ScannerBuffer(lexer), csf).parse().value);
        Tuple2<Map<String, Name>, Name> nameInfo =
                lexer.getNameInfo();
        return new Tuple3<Proc, Map<String, Name>, Name>
                (parsedTerm, nameInfo._1, nameInfo._2);
    }
:};

terminal            SEND    ,
                    RECEIVE ,
                    SERVER  ,
                    BANG    ,
                    COLON   ,
                    DOT     ,
                    LET     ,
                    NEW     ,
                    IF      ,
                    THEN    ,
                    ELSE    ,
                    ENDIF   ,
                    BAR     ,
                    END     ,
                    LPAREN  ,
                    RPAREN  ,
                    LCURLY  ,
                    RCURLY  ,
                    COMMA   ,
                    LARROW  ,
                    RARROW  ,
                    TRUE    ,
                    FALSE   ,
                    PLUS    ,
                    DASH    ,
                    STAR    ,
                    FSLASH  ,
                    PERC    ,
                    EQUAL   ,
                    EQEQ    ,
                    NEQ     ,
                    LESS    ,
                    LESSEQ  ,
                    GRTR    ,
                    GRTREQ  ,
                    AND     ,
                    OR      ;
terminal Name       CHAN    ,
                    IDENT   ;
terminal int        INT     ;

non terminal Proc   p;
non terminal Exp    e;
non terminal BinOp  b;
non terminal UnOp   u;

precedence left PLUS, DASH;
precedence left STAR, FSLASH;
precedence left PERC;
precedence left AND, OR;
precedence nonassoc EQEQ, NEQ, LESS, LESSEQ, GRTR, GRTREQ;
precedence left BAR;
precedence nonassoc DOT;

start with p;

p ::= SEND e:ch COLON e:msg DOT p:proc
        {: RESULT = new Send(ch, msg, proc);                                :}
    | RECEIVE e:ch COLON IDENT:bind DOT p:proc
        {: RESULT = new Receive(false, ch, bind, proc);                     :}
    | SERVER e:ch COLON IDENT:bind DOT p:proc
        {: RESULT = new Receive(true, ch, bind, proc);                      :}
    | LET IDENT:bind EQUAL e:value DOT p:proc
        {: RESULT = new LetIn(bind, value, proc);                           :}
    | IF e:cond THEN p:proct ELSE p:procf ENDIF
        {: RESULT = new IfThenElse(cond, proct, procf);                     :}
    | p:proc1 BAR p:proc2       {: RESULT = new Parallel(proc1, proc2); :}
    | NEW IDENT:bind DOT p:proc {: RESULT = new New(bind, proc);        :}
    | END                       {: RESULT = End$.MODULE$;               :}
    | LPAREN p:proc RPAREN      {: RESULT = proc;                       :}
    ;

e ::= IDENT:name                    {: RESULT = new Variable(name);     :}
    | CHAN:ch                       {: RESULT = new ChanLiteral(ch);    :}
    | INT:x                         {: RESULT = new IntLiteral(x);      :}
    | TRUE                          {: RESULT = new BoolLiteral(true);  :}
    | FALSE                         {: RESULT = new BoolLiteral(false); :}
    | e:l b:op e:r                  {: RESULT = new BinExp(op, l, r);   :}
    | u:op e:exp                    {: RESULT = new UnExp(op, exp);     :}
    | LPAREN e:exp RPAREN           {: RESULT = exp;                    :}
    | LCURLY e:l COMMA e:r RCURLY   {: RESULT = new Pair(l, r);         :}
    ;

b ::= PLUS          {: RESULT = Add$.MODULE$;       :}
    | DASH          {: RESULT = Sub$.MODULE$;       :}
    | STAR          {: RESULT = Mul$.MODULE$;       :}
    | FSLASH        {: RESULT = Div$.MODULE$;       :}
    | PERC          {: RESULT = Mod$.MODULE$;       :}
    | EQEQ          {: RESULT = Equal$.MODULE$;     :}
    | NEQ           {: RESULT = NotEqual$.MODULE$;  :}
    | LESS          {: RESULT = Less$.MODULE$;      :}
    | LESSEQ        {: RESULT = LessEq$.MODULE$;    :}
    | GRTR          {: RESULT = Greater$.MODULE$;   :}
    | GRTREQ        {: RESULT = GreaterEq$.MODULE$; :}
    | AND           {: RESULT = And$.MODULE$;       :}
    | OR            {: RESULT = Or$.MODULE$;        :}
    ;

u ::= BANG          {: RESULT = Not$.MODULE$;       :}
    | LARROW        {: RESULT = PLeft$.MODULE$;     :}
    | RARROW        {: RESULT = PRight$.MODULE$;    :}
    ;
